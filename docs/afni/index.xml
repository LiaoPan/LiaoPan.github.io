<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AFNI系列教程 on 脑技术计划</title>
    <link>https://LiaoPan.github.io/afni/</link>
    <description>Recent content in AFNI系列教程 on 脑技术计划</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Jan 2023 23:05:15 +0800</lastBuildDate><atom:link href="https://LiaoPan.github.io/afni/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AFNI 系列教程 #1.Preprocessing</title>
      <link>https://LiaoPan.github.io/afni/preprocess/</link>
      <pubDate>Thu, 08 Jun 2023 18:23:06 +0800</pubDate>
      
      <guid>https://LiaoPan.github.io/afni/preprocess/</guid>
      <description>简介 预处理步骤 1. AFNI命令与uber_subjects.py 运行Uber被试脚本：a. 配置分析脚本 运行Uber被试脚本：b. 运行分析脚本 2. 时间层校正(Slice-Timing Correction) 3. 配准与归一化(Registration and Normalization) 4. 对齐与运动校正(Alignment and Motion Correction) 5. 平滑(Smoothing) 6. 掩膜(or 掩码)与缩放(Masking and Scaling) 7. 检查预处理结果 参考 简介 我们在对fMRI数据进行预处理时，会对每个TR获取的三维图像进行清理。一个fMRI容积(volume)不仅包含我们感兴趣的信号&amp;ndash;含氧血液的变化，还包含我们不感兴趣的波动(fluctuations)，如头部运动(head motion)、随机漂移(random drifts)、呼吸(breathing)和心跳(heartbeats)。我们将这些波动称为噪声(noises)，因为我们希望将它们从我们感兴趣的信号中分离出来。其中一些可以通过建模从数据中回归出来（将在建模拟合一章中讨论），其他的可以通过预处理减少或去除。
数据前提：请提前准备好Flanker task数据集，我们可以在OpenNeuro网站上找到并免费下载。
要开始预处理sub-08的数据，请通读以下章节。我们将首先概述如何使用AFNI命令，然后介绍uber_subject.py，它允许编写一个脚本，为我们完成所有预处理。然后，您将了解为什么要进行这些预处理步骤，以及如何在每个步骤之前和之后检查数据质量。
预处理步骤 不同的软件包会以略微不同的顺序完成这些步骤&amp;ndash;例如，FSL会在模型拟合后对统计图(statistical map)进行归一化处理。还有一些分析省略了某些步骤&amp;ndash;例如，一些做多体素模式分析（multi-voxel pattern analyses）的人不平滑他们的数据。无论如何，下面列出的是在典型数据集上执行的最常见步骤。
1. AFNI命令与uber_subjects.py 简介
在所有fMRI分析软件包中，AFNI有最难学的名声。尽管过去可能确实如此，但AFNI的开发人员在过去几年中努力使他们的软件更易学易用：除了查看器，AFNI的最新版本还包含其他图形用户界面，可以通过命令uber_subject.py和uber_ttest.py访问这些图形界面。这些图形用户界面用于创建脚本，自动完成每个被试的预处理和模型设置。
在讨论这些命令之前，我们先回顾一下典型AFNI命令的基本原理。毕竟，&amp;ldquo;uber&amp;quot;脚本只是将大量命令按照处理数据的顺序编译在一起。您还将使用单个AFNI命令执行更高级的分析，如感兴趣区域（ROI）分析。
AFNI 命令
AFNI命令类似于Unix命令： 它们通常需要至少一个参数或输入，而且通常还需要指定命令输出的名称。
以头骨剥离为例，这是一个常见的预处理步骤，用于将头骨从大脑中剥离出来。执行这一步的AFNI命令称为3dSkullStrip。导航至sub-08/anat目录，然后输入3dSkullStrip并按回车键，我们可以看到该命令的帮助文档信息。
通常情况下，只键入命令而不输入任何参数将默认打印帮助文档。在这里我们需要指定一个额外的标志-h来打印帮助文件，输入3dSkullStrip -h然后按回车键。你会注意到屏幕上打印了大量的文本，超过了终端可以同时显示的数量。如果想看更容易阅读的帮助文件，键入3dSkullStrip -h | less。竖条表示竖条左边命令的输出，即&amp;quot;3dSkullStrip -h&amp;rdquo;，应该被导入less命令，它允许你上下翻阅帮助文件。在这个 &amp;ldquo;分页窗口&amp;quot;中，输入&amp;quot;d&amp;quot;可以向下翻一页，输入&amp;quot;u&amp;quot;可以向上翻一页，输入上下箭头可以上下翻一行。要搜索帮助文件，键入一个正斜线（/），然后键入要查找的文本，按回车键。要退出分页窗口，请按 &amp;ldquo;q&amp;quot;键。
**文档和帮助文件是AFNI的最大优势。每条命令的用法都有清晰的概述，并详细解释了使用不同选项的原因。**给出的示例命令涵盖了不同的情况&amp;ndash;例如，如果颅骨去除后在输出图像中留下了太多的颅骨，我们建议使用-push_to_edge这样的选项。
3dSkullStrip最基本的用法是使用-input标志来指定将要被剥离的解剖数据集。例如
3dSkullStrip -input sub-08_T1w.nii.gz 大约一分钟后，会生成一个名为skull_strip_out+orig的新文件。这就是头骨切片的解剖图像，我们可以打开AFNI浏览器查看。你可能会注意到在额叶有几个体素的皮质被移除，头骨顶部和后部有一些硬脑膜残留，但总体来说头骨剥离的效果非常好。
另一种查看条纹质量的方法是加载原始解剖图像sub-08_T1w.nii.gz作为Underlay，加载颅骨去除图像skull_strip_out作为Overlay。我们可以通过点击观察窗口中的任意位置，然后按 &amp;ldquo;o&amp;quot;键来交替查看和隐藏叠加；另一个选项是按 &amp;ldquo;u&amp;quot;键来在每张图像之间切换。这些查看选项将有助于您在预处理步骤前后检查数据。</description>
    </item>
    
    <item>
      <title>AFNI 系列教程 #2.统计与建模</title>
      <link>https://LiaoPan.github.io/afni/stats/</link>
      <pubDate>Thu, 20 Jul 2023 18:57:54 +0800</pubDate>
      
      <guid>https://LiaoPan.github.io/afni/stats/</guid>
      <description>简介 运行一级分析（First-Level Analysis） uber_subject.py 脚本的再次使用 刺激时序文件（Stimulus Timing Files） 广义线性测试（Symbolic GLTs） 额外的回归选项(Extra Regress Options) 理想时间序列与广义线性模型 检查输出结果 查看统计文件 参考资料 简介 现在，经过预处理后，我们可以对数据进行模型拟合。为了理解模型拟合的原理，我们需要回顾一些基本原理，如一般线性模型（GLM）、BOLD反应和什么是时间序列。这些主题在下面章节中都有讨论。
在你回顾了这些概念之后，你就可以使用FEAT进行一级分析了。下图说明了我们将如何对数据进行模型拟合。
在构建了一个表明BOLD反应应该是什么样子的模型（A）后，该模型被拟合到每个体素的时间序列上（B）。模型的拟合程度（也称为拟合度）可以用统计图在大脑上表示出来，强度越高表示模型拟合度越高。然后，这些统计图可以被阈值化，只显示具有统计学意义的模型拟合的体素（C）。 关于时间序列、BOLD信号、HRF、广义线性模型相关基础知识，可参阅FSL教程。
运行一级分析（First-Level Analysis） uber_subject.py 脚本的再次使用 之前，我们使用uber_subject.py命令为单个研究对象设置了预处理脚本。你可能还记得，我们删除了其中一个名为&amp;quot;regress&amp;quot;的处理块，因为我们当时并不关注回归。但现在，我们将把回归块添加回uber_subject.py脚本中，并将预处理和一级分析合并到一个脚本中。
让我们为同一个被试sub-08创建一个新脚本。首先，导航到sub-08目录，输入rm -r subject_results，删除预处理目录。在包含所有被试的目录下，在命令行中输入uber_subject.py。这一次，在&amp;quot;analysis initialization&amp;quot;部分，我们将保留所有数据块的原样（不过，由于本示例数据集中的数据已经进行了切片时间校正，因此可以删除&amp;quot;tshift &amp;ldquo;数据块而不影响结果，这一点在前面的章节中已经讨论过）。
按照预处理的方法填写解剖和功能图像，并对 &amp;ldquo;extra align options&amp;quot;和 &amp;ldquo;extra tlrc options&amp;quot;进行同样的修改。本章我们将重点讨论图形用户界面的以下部分：
stimulus timing files; symbolic GLTs; extra regress options. 如果uber_subject.py不能使用，比如pyqt4老旧安装麻烦等问题，导致脚本不能使用，建议使用下述使用uber_subject.py脚本输出的sub_08_afni_proc.sh脚本。
sub_08_afni_proc.sh #!/usr/bin/env tcsh # created by uber_subject.py: version 1.2 (April 5, 2018) # creation date: Mon Nov 18 12:30:05 2019 # set subject and group identifiers set subj = sub_08 set gname = Flanker # set data directories set top_dir = ${PWD}/sub-08 set anat_dir = $top_dir/anat set epi_dir = $top_dir/func set stim_dir = $top_dir/func # run afni_proc.</description>
    </item>
    
  </channel>
</rss>
