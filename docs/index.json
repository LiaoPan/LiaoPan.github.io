[
{
	"uri": "https://LiaoPan.github.io/dipy/basic/",
	"title": "快速入门",
	"tags": [],
	"description": "",
	"content": "快速入门 本教程知识点：\n导入和保存dMRI的NIfTI数据 绘制与查看dMRI影像数据 读取bval和bvec文件 Jupyter已省略部分内容，请点击这里全屏显示 "
},
{
	"uri": "https://LiaoPan.github.io/freesurfer/installation/",
	"title": "FreeSurfer教程 #1. 安装",
	"tags": [],
	"description": "",
	"content": "安装方法简述 根据自己系统下载对应的安装包（FreeSurfer 7.3.2 ~5G） 通过网址(https://surfer.nmr.mgh.harvard.edu/registration.html),获取license.txt,将其放置在FreeSufer的安装目录下。 参考 官网安装指导 "
},
{
	"uri": "https://LiaoPan.github.io/basics/",
	"title": "基础知识",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Basics Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "https://LiaoPan.github.io/dipy/tracking_basic/",
	"title": "纤维束追踪入门",
	"tags": [],
	"description": "",
	"content": "Basic Tracking(Local fiber tracking) 本教程知识点：\n如何使用扩散像数据集来实现纤维束重建 1)从扩散数据集获取方向(directions)的方法。 2)识别追踪何时必须停止的方法。 3)设置追踪种子(seed)。 如何保存trk文件 使用StatefulTractogram()和save_trk()函数保存trk文件 局部纤维跟踪(Local fiber tracking)是一种通过从局部方向信息创建流线(streamlines)来模拟白质纤维的方法。其思想如下:如果一个区域/路径段的局部方向是已知的，可以沿着这些方向进行集成，以构建该结构的完整表示。局部纤维束追踪因其简单、鲁棒性好而被广泛应用于扩散MRI领域。\n步骤一. 从扩散数据集获取方向(directions)的方法\n基于 Constant Solid Angle ODF模型来拟合数据，该模型会评估每个voxel的取向分布函数(ODF,Orientation Distribution Function)。OODF 是作为方向函数的水扩散分布。ODF的峰值是图像中某一点上束段(tract segments)方向的良好估计。在这里，我们使用peaks_from_model来拟合数据，并计算白质所有体素中的纤维方向。\n步骤二. 识别追踪何时必须停止的方法\n接下来，我们需要用某种方法将纤维追踪限制在具有良好方向性信息的区域。我们已经创建了白质掩码(white mask)，但我们可以更进一步，通过对广义分数各向异性（GFA,generalized fractional anisotropy）进行阈值处理，将纤维追踪限制在那些ODF显示出明显限制性扩散的区域。\n步骤三. 设置追踪种子(seed)\n在我们开始追踪之前，我们需要指定在哪里 \u0026ldquo;seed\u0026rdquo;（开始）纤维追踪。一般来说，选择的种子将取决于人们感兴趣的建模路径。在这个例子中，我们将在胼胝体的矢状切面上使用一个每个体素的2x2x2的网格种子。从这个区域进行追踪将给我们一个胼胝体束的模型。这个切片在标签的图像中具有标签值2。\n使用EuDX算法构建一个确定性的纤维束流线(streamlines)。 所谓的确定性(deterministic)表示如果你重复纤维跟踪（保持所有输入相同），你将得到完全相同的一组纤维束流线。\nJupyter已省略部分内容，请点击这里全屏显示 使用csdeconv.mask_for_response_ssst()函数来获取每个体素的各向异性配置（very anisotropic configurations）的信息，该函数会返回所选体素的mask。 通过这个mask，我们就可以通过csdeconv.response_from_mask_ssst()函数计算响应函数。\nload_nifti_data()和load_nifti()函数的区别:\nload_nifti_data()只加载nifti内的data array。\nload_nifti()除了加载data array,还要把其他信息也加载进来（data, img.affine, img, vox_size, nib.aff2axcodes(img.affine)）。\n方向场（Direction Field）图如何看？\nx - Red - 方向场图中为红色标识\ny - Green - 方向场图中为绿色标识\nz - Blue- 方向场图中为蓝色标识\n"
},
{
	"uri": "https://LiaoPan.github.io/freesurfer/basic/",
	"title": "FreeSurfer教程 #2. FreeSurfer输出结果与FreeView可视化",
	"tags": [],
	"description": "",
	"content": " 0. 本文知识点汇总 1. 教程数据准备 FreeSurfer 的输出结果 使用FreeView来图片查看Volumes 使用FreeView来3D查看Surfaces 参考资料 0. 本文知识点汇总 FreeSurfer输出结果的简单理解 使用FreeView对FreeSurfer的结果（Volumes、Surfaces）进行可视化查看 1. 教程数据准备 在FsTutorial_Data下载相关教程的测试数据，大概8GB。\n使用命令行下载相关教程数据，也可以直接访问网址下载，然后解压。\ncurl https://surfer.nmr.mgh.harvard.edu/pub/data/tutorial_data.tar.gz -o tutorial_data.tar.gz tar -xzvf tutorial_data.tar.gz rm tutorial_data.tar.gz export TUTORIAL_DATA=/path/to/your/tutorial/dir # 定义环境变量TUTORIAL_DATA ls $TUTORIAL_DATA buckner_data fsfast-functional diffusion_recons fsfast-tutorial.subjects diffusion_tutorial long-tutorial FreeSurfer 的输出结果 surf 文件夹下生成 . white、. sphere、. inflated 等网格点文件，每一个文件里面都存储了大脑皮质表面网格点的三维坐标及相邻顶点构成的三角面片信息。\nsurf 文件夹下生成基于曲面的形态特征数据，不同的特征采用不同的文件后缀名，\n皮质厚度（ . thickness ） 雅可比度量（. jacobian. white） 脑沟（ . sulc ） 曲率（. curv） 外表面积（. area） 体积（. volume）等面数据文件，其坐标索引号与 Mesh 网格序号一致。 **stats **文件夹下，对于每个脑图谱(atlas)都有一个分区结果(parcellations)。比如，\nlh.aparc.annot，使用Desikan-Killiany图谱的左半球的分区结果；\nlh.aparc.a2009s.annot,使用Destrieux图谱的左半球分区结果；\naseg.stats包含了所有图谱的分割结果。如果想知道怎么提取这些信息，请跳转。\nDesikan-Killiany图谱与Destrieux图谱的区别在于，Destrieux图谱包含更多的分区，可以适用于更加精细化的分析。 使用FreeView来图片查看Volumes freeview -v \\ good_output/mri/T1.mgz \\ good_output/mri/wm.mgz \\ good_output/mri/brainmask.mgz \\ good_output/mri/aseg.mgz:colormap=lut:opacity=0.2 \\ -f good_output/surf/lh.white:edgecolor=blue \\ good_output/surf/lh.pial:edgecolor=red \\ good_output/surf/rh.white:edgecolor=blue \\ good_output/surf/rh.pial:edgecolor=red -v 用于加载volumes; -f 用于加载surfaces; 更多详细了解，请参考官网教程\n使用FreeView来3D查看Surfaces 下述Surfaces都可以使用FreeView进行查看。\npial(软膜), white(白质) and inflated surface(膨胀表面) sulcal(脑沟) and curvature maps(曲率图) thickness maps(厚度图) cortical parcellation(皮质分割) freeview -f good_output/surf/lh.pial:annot=aparc.annot:name=pial_aparc:visible=0 \\ good_output/surf/lh.pial:annot=aparc.a2009s.annot:name=pial_aparc_des:visible=0 \\ good_output/surf/lh.inflated:overlay=lh.thickness:overlay_threshold=0.1,3::name=inflated_thickness:visible=0 \\ good_output/surf/lh.inflated:visible=0 \\ good_output/surf/lh.white:visible=0 \\ good_output/surf/lh.pial \\ --viewport 3d 参数以:+\u0026lt;cmd\u0026gt;=进行间隔区分,比如:annot=、:name=、:overlay=、:overlay_threshold=；\nlh.pial:annot=aparc.annot表示在pial表面上加载Desikan-Killiany皮质分区； lh.pial:annot=aparc.a2009s.annot表示在pial表面加载Destrieux皮质分区； :name=pial_aparc:visible=0 表示更改显示名称并关闭该层显示； lh.inflated:overlay=lh.thickness:overlay_threshold=0.1,3表示加载膨胀表面顶部的厚度叠加层并设置要显示的最小和最大阈值；\n绿色区域是脑回，红色区域是脑沟 上图为Desikan-Killiany Cortical Parcellation 上图为Destrieux Cortical Parcellation 上述皮质分割可通过recon-all来生成，对应命令为： ?h.aparc.annot:\nDesikan-Killiany atlas ?h.aparc.a2009s.annot:\nDestrieux atlas FreeView的简单使用方法，不需要每次在终端命令行输入命令来指定打开什么文件以及展示属性，而是仅输入freeview打开UI界面，点击操作即可，方便又快捷！\n更多细节参考和练习，请访问FreeviewGuide\nFreeSurfer 采用的是 RAS 坐标系，其意义为 R：right，X 轴正方向；A：anterior，Y 轴正方向；S：superior，Z 轴正方向。\n参考资料 官网 Freesurfer源码 官网使用手册 中文使用手册 FreeSurfer官网教程 FreeSurfer Ouputs "
},
{
	"uri": "https://LiaoPan.github.io/dipy/",
	"title": "DIPY系列教程",
	"tags": [],
	"description": "",
	"content": "DIPY简介 DIPY是Python中标准的3D/4D成像库，包含空间归一化、信号处理、机器学习、统计分析和医学图像可视化的通用方法。此外，它还包含计算解剖学的专门方法，包括扩散、灌注和结构成像。\nDIPY功能 命令行接口 所有算法都可以使用命令行的方式调用 创建自己的命令行 统计分析 BUAN AFQ K折交叉验证 重构 Single Shell:DTI, CSA, SFM, SDT, Q-Ball, CSD, \u0026hellip; Multi-Shell:GQI, DTI, DKI, SHORE, MAPMRI, MSMT-CSD, \u0026hellip; 配准 仿射变换 2D/3D微分同胚配准（Diffeomorphic 2D/3D Registration） 纤维束成像 概率性纤维束追踪 确定性纤维束追踪 PFT纤维束追踪 去噪 Patch2self Gibbs Unringing LPCA - MPPCA Non Local Means 可视化 ODFs可视化 交互式的纤维束可视化 预处理 Brain extraction SNR estimation Reslice Datasets 安装方式 $ pip install nibabel # 用于读写神经影像数据 $ pip install dipy $ pip install fury # 某些可视化依赖库 当然，也可以使用conda方式进行安装。\n更多安装教程，请参考官网\n如果看到这不知道什么是pip或者conda，可以去学习一下python相关基础。\n教程数据下载 使用python代码下载，数据集默认会下载在主目录下的.dipy目录内。 Jupyter已省略部分内容，请点击这里全屏显示 尽量不要使用jupyter来执行上述命令下载数据，因为目前jupyter的下载进度支持不好，无法查看下载是否已完成且容易僵住。\n使用命令行工具下载,选择特定目录，执行下面命令即可(推荐) $ dipy_fetch list # 查看所有可使用的数据集 INFO:Please, select between the following data names: bundle_atlas_hcp842, bundle_fa_hcp, bundles_2_subjects, cenir_multib, cfin_multib, file_formats, fury_surface, gold_standard_io, isbi2013_2shell, ivim, mni_template, qtdMRI_test_retest_2subjects, qte_lte_pte, resdnn_weights, scil_b0, sherbrooke_3shell, stanford_hardi, stanford_labels, stanford_pve_maps, stanford_t1, syn_data, taiwan_ntu_dsi, target_tractogram_hcp, tissue_data $ dipy_fetch {specific_dataset} --out_dir {specific_data_out_folder} # 选择特定数据集，下载到特定目录，注意{}内内容需要替换。 $ dipy_fetch sherbrooke_3shell --out_dir . # 举例，将sherbrooke_3shell数据集下载到当前目录。 使用dipy_fetch时，\u0026ndash;out_dir不写，即下载到默认目录下(~/.dipy)\n注意 1: 不需要马上下载上述所有数据集，在后续教程中，会陆续使用命令下载教程相关数据。 注意 2: 在下载过程中，经常会碰到报500错误(HTTP Error 500: Internal Server Error)的情况，重新开始即可。\n"
},
{
	"uri": "https://LiaoPan.github.io/mrtrix/",
	"title": "MRtrix3系列教程",
	"tags": [],
	"description": "",
	"content": "简介 MRtrix3提供了一套工具来进行各种类型的弥散MRI分析，从各种形式的纤维束成像到下一代的组水平分析。它的设计考虑到了一致性、性能和稳定性，并以开源许可的方式免费提供。它是由该领域的专家团队开发和维护的，培养了一个由不同背景的用户组成的活跃社区。\nSeamless interaction with main image formats FOD-based DEC maps and panchromatic sharpening 下载安装 访问MRtrix的下载地址,选择不同平台进行安装即可。\nmacOS Linux sudo bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/MRtrix3/macos-installer/master/install)\u0026#34; 该脚本会自动下载MRtrix3软件的最新的二进制发布版本，解压到/usr/local/mrtrix3目录下。\n$ conda install -c mrtrix3 mrtrix3 前提，需要先安装anaconda (or miniconda)。\n如果碰到macOS安装时，无法正常下载install脚本，可以通过网页访问raw.githubusercontent.com/MRtrix3/macos-installer/master/install，然后自己创建文件进行安装。下面是我安装时的install脚本内容。\n#!/bin/bash -e tag=$(basename $(/usr/bin/curl -Ls -o /dev/null -w %{url_effective} https://github.com/MRtrix3/mrtrix3/releases/latest)) if [ -z \u0026#34;${tag}\u0026#34; ]; then echo \u0026#34;ERROR: could not find tag name for latest release ...\u0026#34; exit fi if [ \u0026#34;$1\u0026#34; != \u0026#34;-f\u0026#34; ]; then echo \u0026#34;This installer will download MRtrix ${tag} and install it to /usr/local/mrtrix3.\u0026#34; echo \u0026#34;In addition it will:\u0026#34; echo \u0026#34;* create symbolic links in /usr/local/bin to the binaries in /usr/local/mrtrix3/bin\u0026#34; echo \u0026#34;* create symbolic links in /Applications to the app bundles in /usr/local/mrtrix3/bin\u0026#34; fi if [ $EUID != 0 ]; then echo \u0026#34;ERROR: This script requires root privileges, please run as: sudo \u0026#34;$0\u0026#34; \u0026#34;$@\u0026#34;\u0026#34; exit fi if [ -d \u0026#34;/usr/local/mrtrix3\u0026#34; ] || [ -L \u0026#34;/usr/local/mrtrix3\u0026#34; ] ; then echo \u0026#34;WARNING: /usr/local/mrtrix3 already exists and will be replaced during installation.\u0026#34; fi if [ \u0026#34;$1\u0026#34; != \u0026#34;-f\u0026#34; ]; then while true; do read -p \u0026#34;Are you sure you want to continue? [y/n] \u0026#34; yn case $yn in [Yy]* ) break;; [Nn]* ) exit;; esac done fi if [ ! -d \u0026#34;/usr/local/bin\u0026#34; ]; then if [ -e \u0026#34;/usr/local/bin\u0026#34; ]; then echo \u0026#34;WARNING: /usr/local/bin is not a directory, cannot create symlinks\u0026#34; else echo \u0026#34;WARNING: /usr/local/bin does not exist, creating it for you.\u0026#34; mkdir -p -m 755 /usr/local/bin fi fi url=https://github.com/MRtrix3/mrtrix3/releases/download/${tag}/mrtrix3-macos-${tag}.tar.gz if [ -z \u0026#34;${url}\u0026#34; ]; then echo \u0026#34;ERROR: Could not find tarball of latest release ...\u0026#34; exit fi echo \u0026#34;Downloading \u0026#34;${url}\u0026#34; ...\u0026#34; /usr/bin/curl -sL \u0026#34;${url}\u0026#34; -O tarball=$(basename \u0026#34;${url}\u0026#34;) if [ ! -f \u0026#34;${tarball}\u0026#34; ]; then echo \u0026#34;ERROR: Download not sucessful ...\u0026#34; exit fi if [ -f /usr/local/mrtrix3/symlinks ]; then echo \u0026#34;Removing symbolic links of previous installation ...\u0026#34; for l in $(cat /usr/local/mrtrix3/symlinks); do if [ -L \u0026#34;${l}\u0026#34; ]; then unlink \u0026#34;${l}\u0026#34; fi done fi if [ -d \u0026#34;/usr/local/mrtrix3\u0026#34; ] || [ -L \u0026#34;/usr/local/mrtrix3\u0026#34; ] ; then echo \u0026#34;Removing previous installation in /usr/local/mrtrix3 ...\u0026#34; rm -rf \u0026#34;/usr/local/mrtrix3\u0026#34; fi for l in /usr/local/bin/*; do if [ -L \u0026#34;${l}\u0026#34; ]; then t=\u0026#34;$(readlink \u0026#34;${l}\u0026#34;)\u0026#34; if [[ \u0026#34;${t}\u0026#34; == *\u0026#34;mrtrix3\u0026#34;* ]]; then echo \u0026#34;WARNING: Removing symbolic link \u0026#34;${l}\u0026#34; to \u0026#34;${t}\u0026#34; (conflicting homebrew installation?) ...\u0026#34; unlink \u0026#34;${l}\u0026#34; fi fi done echo \u0026#34;Unpacking \u0026#34;${tarball}\u0026#34; to /usr/local/mrtrix3 ...\u0026#34; tar oxf \u0026#34;${tarball}\u0026#34; -C /usr/local rm \u0026#34;${tarball}\u0026#34; echo \u0026#34;Fixing python shebang ...\u0026#34; cd /usr/local/mrtrix3/bin for f in $(grep -lr \u0026#39;^#!/usr/bin/env python\u0026#39;); do sed -i \u0026#39;\u0026#39; \u0026#39;s|^#!/usr/bin/env python$|#!/usr/bin/python3|\u0026#39; ${f} done echo \u0026#34;Applying patch to show correct version numbers in scripts ...\u0026#34; cd /usr/local/mrtrix3 curl -s https://github.com/MRtrix3/mrtrix3/commit/4a293d30e1c0686037ae637f67932d497eb71ee6.patch | patch -s -p1 echo \u0026#34;Creating symlinks in /usr/local/bin ...\u0026#34; cd /usr/local/bin touch /usr/local/mrtrix3/symlinks for target in $(find ../mrtrix3/bin -maxdepth 1 -type f ! -name \u0026#34;*.*\u0026#34;); do ln -sf \u0026#34;${target}\u0026#34; echo /usr/local/bin/\u0026#34;$(basename \u0026#34;${target}\u0026#34;)\u0026#34; \u0026gt;\u0026gt; /usr/local/mrtrix3/symlinks done echo \u0026#34;Creating symlinks in /Applications ...\u0026#34; cd /Applications for target in /usr/local/mrtrix3/bin/*.app; do ln -sf \u0026#34;${target}\u0026#34; echo /Applications/\u0026#34;$(basename \u0026#34;${target}\u0026#34;)\u0026#34; \u0026gt;\u0026gt; /usr/local/mrtrix3/symlinks done if [[ $SHELL = \u0026#34;/bin/zsh\u0026#34; ]]; then profile=~/.zprofile; else profile=~/.bash_profile; fi echo \u0026#34;$PATH\u0026#34; | grep -q \u0026#39;/usr/local/bin:\u0026#39; || printf \u0026#34;WARNING: /usr/local/bin is not in PATH. You can add it to the PATH with:\\necho \u0026#39;export PATH=/usr/local/bin:\\$PATH\u0026#39; \u0026gt;\u0026gt; ${profile}\\n\u0026#34; echo \u0026#34;Installation complete!\u0026#34; $ touch install #创建脚本文件，然后粘贴上述脚本内容。 $ chmod +x install $ sudo ./install # 执行安装,若因为github的原因导致无法下载，建议在terminal内配置github代理，或者手动下载软件包，修改install脚本,让其读取本地已下载的软件包安装即可。 校验是否安装成功 新起一个terminal，随意选择MRtrix的命令，输入部分命令，比如dwi2,然后按tab键，输入dwi2mask -h,如果可以正常显示命令,那么就应该安装成功了。\n$ dwi2mask -h dwi2mask: part of the MRtrix3 package SYNOPSIS Generates a whole brain mask from a DWI image USAGE dwi2mask [ options ] input output input the input DWI image containing volumes that are both diffusion weighted and b=0 output the output whole-brain mask image DESCRIPTION All diffusion weighted and b=0 volumes are used to obtain a mask that includes both brain tissue and CSF. 官网地址 - GitHub源码地址 - MRtrix官网文档地址\n"
},
{
	"uri": "https://LiaoPan.github.io/spm/",
	"title": "SPM系列教程",
	"tags": [],
	"description": "",
	"content": "SPM介绍 SPM(Statistical Parametric Mapping)分析功能成像数据主流的一个开源软件包，可以分析多种脑成像数据，包括fMRI，PET，SPECT，EEG和MEG。 SPM软件包专为分析脑成像数据序列而设计，这些序列包括不同队列（cohorts）的一系列图像或者同一个被试的时间序列。\n下载与安装 1. 软件下载\n点击链接，填写想要下载的版本、系统、MATLAB等版本信息后，即可下载SPM对应版本软件。 点击链接，下载即可。\n2. 软件安装\nMac系统的SPM8软件安装方法:\n解压已下载的spm软件包\n方法一: 双击压缩包完成解压 方法二: 使用命令行解压 Shell unzip spm8.zip 将SPM软件包地址加入到MATLAB的PATH中\n方法一：在MATLAB 的界面上点击Set Path,选择Add with Subfolders来添加spm软件所在文件夹的路径\n方法二：在MATLAB命令行(Command Window)输入如下命令 Shell addpath /Volumes/Touch/Softwares/spm8 # 这里需要修改为你所在软件的路径 savepath 在设置完路径路径，在MATLAB命令行下输入spm命令，即可打开spm软件的GUI界面。\n如果我们想直接打开fMRI相关模块，我们只需要输入spm fmri命令即可打开fMRI的分析GUI界面。相关操作，以此类推。\n其他系统的安装教程，详见 官网安装教程链接\n"
},
{
	"uri": "https://LiaoPan.github.io/afni/",
	"title": "AFNI系列教程",
	"tags": [],
	"description": "",
	"content": " 在fMRI相关分析软件中，AFNI是最难学习的，如果第一次没学懂，咱多看看、多实践，不用害怕去尝试它。\n介绍 AFNI (Analysis of Functional NeuroImages)是一个领先的功能神经图像分析软件套件，包含 C、Python、R 程序和 shell 脚本，主要开发用于分析和显示多种 MRI 模态：解剖、功能 MRI (FMRI) 和扩散加权 (DWI) 数据。它是免费提供的（作为开源代码和预编译的二进制文件）用于研究目的。该软件几乎可以在任何带有 X11 和 Motif 显示的 Unix 系统上运行。为 MacOS 和 Linux 系统提供二进制包，例如 Fedora、CentOS/Red Hat 和 Ubuntu（包括用于 Linux 的 Windows 子系统）。\nAFNI能解决什么问题？ APQC: afni_proc.py质量控制 帮助研究者检查已处理过的数据。\ngraph LR a(AFNI基本操作)--\u0026gt;b(数据预处理) a(AFNI基本操作)--\u0026gt;d(时间校正) a(AFNI基本操作)--\u0026gt;c(头动校正) a--\u0026gt;f(空间配准) a--\u0026gt;e(空间平滑和时间序列的标注化) a--\u0026gt;g(一般线性模型) a--\u0026gt;h(组分析) 时间校正 在MRI扫描过程中，有两种方法：\n顺序切片采集 按照顺序从上到下、从下到上进行采集。\n交错切片采集 每采集一张切片后隔一张再采集，然后第二遍进行间隙填充。\n即从扫描开始的第一个切片到最后一个切片之间存在一定的时间差，导致采集到的数据并不是同一个时间点。\n脚本：3dTshift\n配准与标准化 每个人的大脑存在差异，在进行组分析时，需要将个体的大脑体素都对应到相同的大脑模板上再进行分析。\n脚本：align_epi_anat.py\n对准和运动校正 在MRI扫描过程中，被试头部可能存在轻微扰动，对于成像结果造成干扰，故我们需要对头动进行校正。\n刚体变换：采用刚体变换来解决头动问题，如果我们设定一个参考点，然后检测到受试者的头部向哪个方向移动了，那么我们只需要将图像的切片向相反的方向移动同样的距离即可，当然，不只是平移，包括旋转等。\n脚本：volreg\n平滑 平滑就是用周围体素的平均值代替当前体素，这对使得图像变得模糊，分辨率降低。但是平滑对与fMRI来说是非常有效的，因为fMRI的噪音较大，平滑后可以显著降噪，同时增强信号。平滑核函数一般包括两个：4mm和10mm，越大的核函数平滑程度更大，当然图像分辨率也越低。\n脚本：blur\nmask和体素缩放 mask 设置一个掩膜(mask)只把头部纳入进来，其余部分都去掉。去结构像的mask，然后应用到功能像上。\n体素缩放 不同受试者的图像之间像素强度可能存在差异，这样的分析结果不会有任何意义，所我我们将每个体素的时间序列缩放为100的平均值（范围0-200）。\n脚本：3dAutomask\n检查预处理结果 数据准备： https://openneuro.org/datasets/ds000102/versions/00001\n参考资料 AFNI官网文档 https://www.cnblogs.com/kongmaster/p/16635637.html "
},
{
	"uri": "https://LiaoPan.github.io/brainstorm/",
	"title": "Brainstorm系列教程",
	"tags": [],
	"description": "",
	"content": "测试一下\n"
},
{
	"uri": "https://LiaoPan.github.io/eeglab/",
	"title": "EEGLAB系列教程",
	"tags": [],
	"description": "",
	"content": "测试一下\n"
},
{
	"uri": "https://LiaoPan.github.io/fieldtrip/",
	"title": "FieldTrip系列教程",
	"tags": [],
	"description": "",
	"content": "测试一下\n"
},
{
	"uri": "https://LiaoPan.github.io/freesurfer/",
	"title": "FreeSurfer系列教程",
	"tags": [],
	"description": "",
	"content": "介绍 FreeSurfer是一款免费开源的用于分析和可视化来自横断面和纵向研究的神经影像数据软件包。它由 Martinos 生物医学成像中心的计算神经成像实验室开发。\nFreeSurfer 为结构像和功能像提供完整的处理流，包括提供线性和非线性配准、皮质和皮质下分割、皮质表面重建、组形态测量统计分析、扩散像、PET分析等的工具。它也是 Human Connectome Project 的首选结构像分析软件。\n有关使用和理解 FreeSurfer 工具的扩展文档，请访问FS Wiki。\nFreeSurfer能解决什么问题？ MRI的图像分割、配准 颅骨剥离，B1偏场校正，灰白色质分割 个体皮质表面与立体定向图谱的非线性配准 皮质表面重建 计算皮质厚度、曲率、灰质体积等 皮层表面区域以及皮层下的大脑结构的标记 组间差异分析以及可视化 参考资料 官网 Freesurfer使用手册 "
},
{
	"uri": "https://LiaoPan.github.io/freesurfer/practice/",
	"title": "FreeSurfer教程 #N. 实践教程之CookBook",
	"tags": [],
	"description": "",
	"content": " 实践#1:如何将一个个体subject映射到fsaverage？ 实践2:如何提取stats文件夹内的统计信息？ 实践#3:如何提取感兴趣ROI区域的结构信息？ 实践#4:如果构建一个surface ROI重采样到体积（Volume）？ 实践#5:如何使用FreeSurfer去除颅骨(skull-stripping)? 实践#1:如何将一个个体subject映射到fsaverage？ 如何按自定义模板，重建皮层，并提取皮层信息？\n实践2:如何提取stats文件夹内的统计信息？ 方法: 使用asegstats2table和aparcstats2table命令来提取 $ asegstats2table --subject \u0026lt;\u0026gt; --common-segs --meas \u0026lt;volume,mean,std\u0026gt; --stats=\u0026lt;stats file\u0026gt; --table=\u0026lt;extracted measurement to a text file\u0026gt; $ asegstats2table --subjects sub-101 sub-103 --common-segs --meas volume --stats=aseg.stats --table=segstats.txt --subjects选项指定了一个被试名称的列表。 --common-segs表示输出所有被试共有的分段，换句话说，如果一个受试者的分段数与其他受试者不同，不要以错误退出命令。 --meas表示要从表中提取哪种结构测量值（\u0026ldquo;volume \u0026ldquo;是默认值；替代值是 \u0026ldquo;mean \u0026ldquo;和 \u0026ldquo;std\u0026rdquo;）。 --stats指的是将从分段数据中提取的统计文件； --table将提取的测量数据写入一个文本文件，按被试名称组织。\n同理，aparcstats2table也类似，\n$ aparcstats2table --subjects sub-101 sub-103 --hemi lh --meas thickness --parc=aparc --tablefile=aparc.txt --hemi,指定要分析的半球 --meas,要提取的测量值,选项有\u0026quot;thickness\u0026rdquo;, \u0026ldquo;volume\u0026rdquo;, \u0026ldquo;area\u0026rdquo;, \u0026ldquo;meancurv\u0026rdquo; --parc,指定图谱，选项有Desikan-Killinay图谱(\u0026ldquo;aparc\u0026rdquo;)和Destrieux图谱(\u0026ldquo;aparc.a2009s\u0026rdquo;)\n实践#3:如何提取感兴趣ROI区域的结构信息？ 如何将一个Volumetric ROI重采样到表面，然后从该ROI中提取结构测量值。 如何将ROI区域映射到皮层上 shell #!/bin/tcsh setenv SUBJECTS_DIR `pwd` # 使用AFNI的3dUndump创建5mm的ROI球体;ROI_file.txt 包含球心的 x、y 和 z 坐标 # https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dUndump.html 3dUndump -srad 5 -prefix S2.nii -master MNI_caez*+tlrc.HEAD -orient LPI -xyz ROI_file.txt # 使用tkmedit查看 # https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/TkmeditGeneralUsage tkmedit -f MNI_caez_N27.nii -overlay S2.nii -fthresh 0.5 # 将结构像模板配准到fsaverage fslregister --s fsaverage --mov MNI_caez_N27.nii --reg tmp.dat # 在fsaverage上查看ROI tkmedit fsaverage T1.mgz -overlay S2.nii -overlay-reg tmp.dat -fthresh 0.5 -surface lh.white -aux-surface rh.white #将ROI映射到fsaverage皮层; #https://surfer.nmr.mgh.harvard.edu/fswiki/mri_vol2surf mri_vol2surf --mov S2.nii \\ --reg tmp.dat \\ --projdist-max 0 1 0.1 \\ --interp nearest \\ --hemi lh \\ --out lh.fsaverage.S2.mgh \\ --noreshape # 检查ROI映射到膨胀皮层的情况 # https://surfer.nmr.mgh.harvard.edu/fswiki/tksurfer tksurfer fsaverage lh inflated -overlay lh.fsaverage.S2.mgh -fthresh 0.5 实践#4:如果构建一个surface ROI重采样到体积（Volume）？ 将一个由FreeSurfer创建的ROI投射到个体体积空间。\n根据label信息，生成ROI Volume。 shell # 手动创建registration file（register.dat） # https://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/ManualRegistration # 去掉--noedit参数，可以弹出GUI界面来手动调整；“beta_0001.nii” is a beta map created in the subject’s native space tkregister2 --mov beta_0001.nii --s subject --noedit --regheader --reg register.dat # 使用mri_label2vol命令将surface ROI转到体积空间。 # mri_label2vol: creates mgz volume from a label or set of labels # --temp: Template volume # --fillthresh: Relative threshold which the number hits in a voxel must exceed for the voxel to be considered a candidate for membership in the label. (See mri_label2vol --help for more information) # --proj: Project the label along the surface normal # https://surfer.nmr.mgh.harvard.edu/fswiki/mri_label2vol mri_label2vol --label lh.superiortemporal.label --temp beta_0001.nii --subject subject --hemi lh --fillthresh .9 --proj frac 0 1 .1 --reg register.dat --o $PWD/stgnew.nii mri_label2vol运行完成之后，我们得到一个新文件stgnew.ni，它是转换为体积空间的表面ROI。\n实践#5:如何使用FreeSurfer去除颅骨(skull-stripping)? shell # 通过设置较低的分水岭阈值（例如 5）来去除更多的头骨,会生成颅骨去除的掩码文件brainmask.mgz。 recon-all -skullstrip -wsthresh 5 -clean-bm -s sub-117_ses-BL_T1w # 即使分水岭阈值较低，仍有一些头骨(skull)和硬脑膜(dura)的碎片残留。你可以使用-gcut选项来删除后者 recon-all -skullstrip -clean-bm -gcut -subjid sub-117_ses-BL_T1w 在你使用watershed的gcut选项后，需要用以下代码重新生成皮层表面。 recon-all -autorecon2-pial -subjid \u0026lt;subject name\u0026gt;\n参数解析：\n-subjid subjid:the subject data upon which to operate autorecon2-pial:process stages 21-23 https://surfer.nmr.mgh.harvard.edu/fswiki/recon-all 扩展 可以使用FSL下的bet2工具来完成颅骨去除(很常用)。\n参考教程\n"
},
{
	"uri": "https://LiaoPan.github.io/mne/",
	"title": "MNE系列教程",
	"tags": [],
	"description": "",
	"content": "更多的MNE使用技巧参考\n"
},
{
	"uri": "https://LiaoPan.github.io/",
	"title": "主页",
	"tags": [],
	"description": "",
	"content": "教程\u0026amp;学习内容 本博客是博主边学习相关知识边记录的相关教程实践，以作备忘和分享。 博主在学习过程中，难免会出现错漏或者理解不对的地方，请大家辩证看待、谨慎使用。\n因为在国内访问github网站时偶尔会出现访问缓慢或者无法访问情况，所以我在gitee也搭建了相同博客网站，供大家访问。 https://panliao.gitee.io/ （国内访问，更加稳定）\n基础知识 DIPY系列教程 快速入门 纤维束追踪入门 MRtrix3系列教程 SPM系列教程 AFNI系列教程 Brainstorm系列教程 EEGLAB系列教程 FieldTrip系列教程 FreeSurfer系列教程 FreeSurfer教程 #1. 安装 FreeSurfer教程 #2. FreeSurfer输出结果与FreeView可视化 FreeSurfer教程 #N. 实践教程之CookBook MNE系列教程 如果我们想深入了解MRI相关知识，推荐查看 Functional Magnetic Resonance Imaging, by Huettel, Song, \u0026amp; McCarthy (3rd Edition)\n或者访问https://mriquestions.com/index.html网站了解\n"
},
{
	"uri": "https://LiaoPan.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://LiaoPan.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]